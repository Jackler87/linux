name: kernel_build

on:
  push:
  workflow_dispatch:

jobs:
  kernel:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Ensure ccache directory exists
        run: mkdir -p ~/.ccache

      - name: Set up ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/*.c', '**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Install dependencies
        run: sudo apt-get install -y bc binutils bison dwarves flex gcc git gnupg2 gzip libelf-dev libncurses5-dev libssl-dev make openssl pahole perl-base rsync tar xz-utils ccache

      - name: Configure ccache
        run: |
          ccache -M 5G
          export CC="ccache gcc"

      - name: Load base kernel config
        run: make defconfig

      - name: Enable selected kernel options
        run: |
          # Load the default configuration
          make defconfig
          # Enable built-in filesystem drivers
          ./scripts/config --enable CONFIG_EXT4_FS
          ./scripts/config --enable CONFIG_JBD2
          ./scripts/config --enable CONFIG_MBCACHE
          # Enable built-in storage drivers
          ./scripts/config --enable CONFIG_BLK_DEV_SD
          ./scripts/config --enable CONFIG_ATA
          ./scripts/config --enable CONFIG_ATA_PIIX
          ./scripts/config --enable CONFIG_ATA_GENERIC
          ./scripts/config --enable CONFIG_SCSI
          ./scripts/config --enable CONFIG_SCSI_SPI_ATTRS
          ./scripts/config --enable CONFIG_MPTSPI
          ./scripts/config --enable CONFIG_MPTSCSP
          # Enable USB drivers
          ./scripts/config --enable CONFIG_USB_SUPPORT
          ./scripts/config --enable CONFIG_USB_EHCI_HCD
          ./scripts/config --enable CONFIG_USB_EHCI_PCI
          ./scripts/config --enable CONFIG_USB_UHCI_HCD
          ./scripts/config --enable CONFIG_USB_COMMON
          # Enable network drivers
          ./scripts/config --enable CONFIG_E1000
          ./scripts/config --enable CONFIG_CFG80211
          ./scripts/config --enable CONFIG_RFKILL
          # Enable sound drivers
          ./scripts/config --enable CONFIG_SND
          ./scripts/config --enable CONFIG_SND_PCM
          ./scripts/config --enable CONFIG_SND_RAWMIDI
          ./scripts/config --enable CONFIG_SND_SEQ
          ./scripts/config --enable CONFIG_SND_TIMER
          # Enable virtualization drivers
          ./scripts/config --enable CONFIG_VIRTIO_VSOCKETS
          ./scripts/config --enable CONFIG_VMWARE_BALLOON
          ./scripts/config --enable CONFIG_VMWARE_VMCI
          # Enable graphics drivers
          ./scripts/config --enable CONFIG_DRM
          ./scripts/config --enable CONFIG_DRM_TTM
          ./scripts/config --enable CONFIG_DRM_KMS_HELPER
          ./scripts/config --enable CONFIG_DRM_VMWGFX
          # Verify the configuration
          make olddefconfig


      - name: Set local version suffix
        run: echo "-we-are-with-you" > localversion
        # This ensures that when we run `make kernelrelease`,
        # it will produce something like "5.x.y-we-are-with-you".

      - name: Build kernel (with suffix)
        run: |
          # The localversion file above ensures your final kernel is named:
          # e.g., 5.19.17-we-are-with-you
          make -j"$(nproc)"

      - name: Build kernel modules
        run: make modules

      - name: Install kernel modules to staging
        run: |
          mkdir -p release/modules
          make INSTALL_MOD_PATH=$(pwd)/release/modules modules_install

      - name: Verify build outputs
        run: ls -R arch/x86/boot

      - name: Determine kernel release version
        id: kernel_version
        run: |
          # Now that we've appended -we-are-with-you via localversion,
          # the `kernelrelease` includes that suffix by default.
          REL=$(make kernelrelease)
          echo "KERNELRELEASE=$REL" >> $GITHUB_ENV
          echo "Kernel release version: $REL"

      - name: Create Initrd
        run: |
          # Build the initrd for the new kernel
          sudo update-initramfs -c -k ${{ env.KERNELRELEASE }}

          # By default, update-initramfs creates /boot/initrd.img-<VERSION>
          # We'll rename it to .img for clarity
          sudo mv /boot/initrd.img-${{ env.KERNELRELEASE }} /boot/initrd.img-${{ env.KERNELRELEASE }}.img

      - name: Copy kernel files to staging directory
        run: |
          mkdir -p release
          cp arch/x86/boot/bzImage release/vmlinuz-${{ env.KERNELRELEASE }}
          cp System.map release/System.map-${{ env.KERNELRELEASE }}
          cp vmlinux release/vmlinux-${{ env.KERNELRELEASE }}
          cp /boot/initrd.img-${{ env.KERNELRELEASE }}.img release/
          cp .config release/config-${{ env.KERNELRELEASE }}

      - name: Package kernel files
        run: |
          tar -czf kernel-files-${{ env.KERNELRELEASE }}.tar.gz -C release .

      - name: Package kernel modules
        run: |
          tar -czf kernel-modules-${{ env.KERNELRELEASE }}.tar.gz -C release/modules .

      - name: Upload compiled kernel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-artifacts
          path: |
            kernel-files-${{ env.KERNELRELEASE }}.tar.gz
            kernel-modules-${{ env.KERNELRELEASE }}.tar.gz

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ github.run_number }}'
          release_name: 'Release ${{ github.run_number }}'
          body: 'Automated release for build ${{ github.run_number }}.'
          draft: false
          prerelease: false
          files: |
            kernel-files-${{ env.KERNELRELEASE }}.tar.gz
            kernel-modules-${{ env.KERNELRELEASE }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
